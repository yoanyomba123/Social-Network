Social Network Project Plan

Step 1.
    Backend Architecture Development
    - Login & Logout Functionality
Step 2.
    Front End Architecture Development
    * MAIN
        - Landing Page
        - About Us
        - RSS Feeds & Markets
        - RSS Feeds & World Economics
        - RSS Feeds & Fund Reports & Fed Stuff
        - RSS Feeds & Global Markets News 
    * LOGGEDIN
        - Landing Page
        - Navigation bar

-------------------------------------------
April 17th
    1. RSS Feed - multiple aggregated feeds





















const mongoose = require('mongoose');
const config = require('../config/keys');
const _ = require("underscore");
const Schema = mongoose.Schema;
const Stream_node = require('getstream-node');

var feedManager = Stream_node.FeedManager;
// connect mongoose to stream.io
var streamMongoose = Stream_node.mongoose;
var followSchema = mongoose.Schema(
	{
		user: { 
            type: Schema.Types.ObjectId, 
            required: true, 
            ref: 'User' 
        },
		target: { 
            type: Schema.Types.ObjectId, 
            required: true, 
            ref: 'User' 
        },
	},
	{
		collection: 'Follow',
	}
);

followSchema.plugin(streamMongoose.activity);

followSchema.methods.activityNotify = function() {
	target_feed = FeedManager.getNotificationFeed(this.target._id);
	return [target_feed];
};

followSchema.methods.activityForeignId = function() {
	return this.user._id + ':' + this.target._id;
};

followSchema.statics.pathsToPopulate = function() {
	return ['user', 'target'];
};

followSchema.post('save', function(doc) {
	if (doc.wasNew) {
		var userId = doc.user._id || doc.user;
		var targetId = doc.target._id || doc.target;
		FeedManager.followUser(userId, targetId);
	}
});

followSchema.post('remove', function(doc) {
	FeedManager.unfollowUser(doc.user, doc.target);
});

const follow = mongoose.model('Follow', followSchema);

streamMongoose.setupMongoose(mongoose);






  